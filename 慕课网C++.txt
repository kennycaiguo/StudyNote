#include<iostream>
using namespace std;    //关于这里，且听下回分解
int main()
{
   cout<<"Hello imooc"<<endl;  //在此填写我们的开篇Hello imooc
   return 0;
}

C++基础
新的数据类型
C语言中的数据类型有
基本类型 int char float double
构造类型 数组 struct union enum
指针类型
空类型(无值类型) void

C++中还有布尔类型 bool
C中间接使用bool的实例
int flag=0;
if(flag==1){
	
}

C++中可以这样写
bool flag=0;
if(flag){
	
}

新的初始化方法
C语言中的初始化只有int a=111;
C++语言中增加了直接初始化 int x (1024); 直接初始化将在后续讲解

随用随定义
C语言中所有变量定义必须位于函数的最前面

C++的输入暑促方式
C语言中的I/O流
输入过程：输入设备->输入流->scanf->变量
输出过程：变量->printf->输出流->输出设备

C++的I/O流程基本不变，但是方式不同
输入过程：输入设备->输入流->cin->变量
输出过程：变量->cout->输出流->输出设备

cout语法形式
	cout<<x<<endl;//endl和C语言中的\n是一个意思
	cout<<"x+y="<<x+y<<endl;
	cout<<x,y,z<<endl;//这样写，把x,y,z都写在了一起，这样做是错误的

cin语法形式
	cin>>x;//不必关心x的类型
	cin>>x>>y;//依次给x和y赋值

C++的I/O无需关心占位符和数据类型

#include<iostream>
#include<stdlib.h>
using namespace std; //用iostream下的std命名空间
int main(void){
	cout<<"请输入一个正数："<<endl;
	int x=0;
	cin>>x;
	cout<<oct<<x<<endl;//以八进制输出
	cout<<dec<<x<<endl;//以十进制输出
	cout<<hex<<x<<endl;//以十六进制输出
	cout<<"请输入一个布尔值（0或1）:"<<endl;
	bool y=false;
	cin>>y;
	cout<<boolalpha<<y<<endl;
	system("pause");
	return 0;
}

命名空间
namespace A
{
	int x=0;
	void f1();
	void f2();
}
namespace B
{
	int x=2;
	void f1();
	void f3();
}
cout<<A::x<<endl; //A::xx意思就是A里面的x变量
B::f1(); //B::f1()就是B里面的f1函数


#include <stdlib.h>
#include <iostream>
using namespace std;

namespace A{
	int x=1;
	void fun(){
		cout <<"A"<<endl;
	}
}
namespace B{
	int x=2;
	void fun(){
		cout <<"B"<<endl;
	}
	fun2(){
		cout<<"2B"<<endl;
	}
}
using namespace B;
int main(void){
	cout<<A::x<<endl;
	B::fun();
	fun2();//main主函数上面已经定义了命名空间B，所以如果不指定命名空间，那么默认会调用命名空间B下面的fun2方法
	system("pause");
	return 0;
}
//其实由以上的程序我们可以进一步推理出：在程序最开始不写using namespace std;也是可以的，只要在cout和endl的前面都加上std::就可以，即类似于std::cout或者std::endl


封装一个方法找出整型数组中的最大值和最小值
#include <stdlib.h>
#include <iostream>
using namespace std;
namespace CompA{
	int getMaxOrMin(int* arr,int count,bool isMax){
		int temp=arr[0];
		for(int i=1;i<count;i++){
			if(arr[i]>temp && isMax){
				temp=arr[i];
			}
			if(arr[i]<temp && !isMax){
				temp=arr[i];
			}
		}
		return temp;
	}
}
int main(){
	int arr1[4]={1,2,3,4};
	int maxVal=CompA::getMaxOrMin(arr1,4,1);
	int minVal=CompA::getMaxOrMin(arr1,4,0);
	cout<<maxVal<<endl;
	cout<<minVal<<endl;
	system("pause");
	return 0;
}

基本数据类型的引用
#include<iostream>
using namespace std;
int main(){
	int a=1;
	int &b=a;//b就是a的别名，需要注意别名必须初始化
	b=10;
	cout<<a<<endl;//10，修改了b，a也会跟着变
	return 0;
}
结构体类型的引用
typedef struct{
	int x;
	int y;
}Coor;
#include<iostream>
using namespace std;
int main(){
	Coor c;
	Coor &c1=c;
	c1.x=20;
	c1.y=40;
	cout<<c.x<<endl;//20
	cout<<c.y<<endl;//40
	return 0;
}
指针类型的引用
#include<iostream>
using namespace std;
int main(){
	int a=10;
	int* b=&a;
	int*&c=b;
	*c=20;
	cout<<a<<endl;
	return 0;
}
引用作函数参数
在C语言中希望在函数中改变变量的值需要这样写
void fun(int*a,int*b){
	int c=0;
	c=*a;
	*a=*b;
	*b=c;
}
int x=10;
int y=20;
fun(&x,&y);
使用引用之后
void fun(int &a,int &b){
	int c=0;
	c=a;
	a=b;
	b=c;
}
int x=10;
int y=20;
fun(x,y);

引用的代码演示
#include<iostream>
#include<stdlib.h>
int main(){
	int a=0;
	int &b=a;
	b=20;
	cout<<a<<endl;//20
	a=30;
	cout<<b<<endl;//30
	system("pause");
	return 0;
}

控制变化的const
const加在基本数据类型前面比较简单
const int x=3;//常量

const加在指针类型前面情况比较复杂
const int *p=NULL;
int const *p=NULL;
以上两种写法等价
int * const p=NULL;//这种写法和上面两种酒不等价了

const int * const p=NULL;
int const * const p=NULL;
//以上两种写法等价

int x=3;
const int *p=&x;
//p=&y;正确，因为const修饰的是*p
//*p=4;错误

int x=3;
int *const p=&x;
//p=&y;错误

const int x=3;
const int *const p=&x;
//p=&y;错误
//*p=4;错误

const与引用
int x=3;
const int &y=x;
//x=10;正确
//y=20;错误

int x=3;
const int y=x;
//y=5;错误

int x=3;
const int *y=&x;
//*y=5;错误

int x=3;
int z=4;
int * const y=&x;
//y=&z;错误

const int x=3;
const int &y=x;
//y=5;错误

const int x=3;
//int *y=&x;错误

int x=3;
const int *y=&x;

