明日科技PHP

PHP标记风格
<?php
	echo "这是XML风格标记";
?>


PHP的8种数据类型：boolean integer float/double string array object resource null

<?php
	$boo=true;
	if($boo==true){
		
	}
?>


0 0.0 "0" "" 只声明没有赋值的数组 都是假

双引号中的字符串所包含的变量会自动被替换成实际数值，单引号包含的变量按普通字符输出

当表达式的值超出int表示范围时会转换成float型

浮点数之间不可以比较大小

$arr1=array(1,2,3,4);
$arr2=array(0=>"php",1=>"mysql",2=>"apache");

声明数组后数组中元素个数可以自由更改，只要给数组赋值，数组就会自动增加长度

使用资源类型系统会自动启用垃圾回收机制，不必手动释放内存

null不区分大小写，被赋予null的3种情况：
还没有赋任何值
被赋值null
被unset函数处理过的变量


is_null() 判断变量是否为null，返回boolean类型
if(is_null($str)){
	echo "空";
}

从PHP4开始 unset函数不再有返回值

$num="3.14";
settype($num,"integer");
echo $num; //3 原变量值变了

$num="3.14";
echo (integer)$num;//"3.14" 原变量值不变

内置检测类型的函数
is_bool
is_string
is_float/is_double
is_integer/is_int
is_null
is_array
is_object
is_numeric

//定义常量
define(string constant_name,mixed value[,case_sensitive=true]);

//获取常量的值
方式1：直接写常量名
方式2：mixed constant(string const_name);

//判断常量是否定义
bool defined(string constant_name)

//预定义常量
__FILE__		PHP程序文件名
__LINE__		PHP程序行数
PHP_VERSION
PHP_OS
TRUE
FALSE
NULL
E_ERROR			该常量指到最近的错误处
E_WARNING		该常量指到最近的错误处
E_PARSE			该常量指到解析语法有潜在问题处
E_NOTICE		该常量为发生不寻常处的提示单并不一定是错误处

上述以E开头的预定义常量是PHP的错误调试部分，详情请参考error_reporting()函数

//可变变量
$change_name="trans";
$trans="123";
echo $$change_name;//123

//预定义变量
$_SERVER["SERVER_ADDR"] 当前运行脚本所在服务器的IP地址
$_SERVER["SERVER_NAME"]
$_SERVER["REQUEST_METHOD"]
$_SERVER["REMOTE_ADDR"] 正在浏览当前页面用户的IP地址
$_SERVER["REMOTE_HOST"] 正在浏览当前页面用户的主机名，反向域名解析基于该用户的REMOTE_ADDR
$_SERVER["SCRIPT_FILENAME"] 当前执行脚本的绝对路径名，注意：如果脚本在CLI中被执行，作为相对路径，如file.php或者.../file.php，$_SERVER["SCRIPT_FILENAME"]将包含用户指定的相对路径
$_SERVER["SERVER_PORT"] 服务器所使用的端口，默认为80，如果使用SSL安全连接，则这个值为用户设置的HTTP端口
$_SERVER["SERVER_SIGNATURE"] 包含服务器版本和虚拟主机名的字符串
$_SERVER["DOCUMENT_ROOT"] 当前运行脚本所在的文档根目录，在服务器配置文件中定义
$_COOKIE
$_SESSION
$_POST
$_GET
$GLOBALS 由所有已定义全局变量组成的数组，变量名就是该数组的索引，它可以称得上是所有超级变量的超级集合

$m xor $n 当$m和$n一真一假的时候返回真

$err=@(5/0); //可以屏蔽错误信息

//引用传递
function example(&$m){
	$m=$m*5+10;
	echo $m; //15
}
$m=1;
echo $m;//15;

//默认参数
function values($prices,$tax=""){
	$price=$price+($price*$tax);
}


//对函数的引用
function &example($tmp=0){
	return $tmp;
}
$str=&example("看到了");
echo $str;//看到了

和参数引用传递不同，对函数的引用必须在两个地方都是用&符号，用来说明返回的是一个引用


//取消引用
$num=1234;
$math=&$num;
echo $math;		//1234
unset($math);
echo $math;		//什么都没有
echo $num;		//1234

rand(int mix,int max) 返回mix和max之间的一个随机数，如果没有参数，则返回0-RAND_MAX之间的一个随机整数

string trim(string str[,string charlist])

charlist指定需要从字符串中删除哪些字符，如果不设置该参数，则所有的可选字符都将被删除，trim函数的参数charlist的可选值有
\0 null，空值
\t tab，制表符
\n 换行符
\x0B 垂直制表符
\r 回车符
" " 空格
除了这些之外还可以自己定义非空白字符

与之类似的方法还有ltrim rtrim

string addslashes(string str) 为字符串加反斜线转义
string stripslashes(string str) addslashes的逆向方法


所有数据插入数据库之前有必要应用addslashes()函数进行字符串转义，以免特殊字符未经转义而在插入数据库时出现错误

string addcslashes(string str,string charlist) 指定在字符串str的charlist这些字符前加上反斜线
string stripcslashes(string str,string charlist)

echo strlen("我"); //2

string substr(string str,int start[,int length])

//字符串比较
int strcmp(string str1,string str2); //区分大小写 相等返回0 str1大于str2时返回值大于0  str1小于str2时返回值小于0

int strcasecmp(string str1,string str2); //不区分大小写

int strnatcmp(string str1,string str2); //通过自然排序法进行字符串比较

echo strcmp("str2","str10");	//1
echo strnatcmp("str2","str10");	//-1
echo strcmp("aaa","AAA");		//1
echo strnatcmp("aaa","AAA");	//1

strnatcasecmp() 不区分大小写自然排序

指定从源字符串的位置开始比较
int strncmp(string str1,string str2,int len)
$str1="I like PHP";
$str2="i am fine";
echo strncmp($str1,$str2,2); //-1 比较前两个字符

//字符串截取
string strstr(string haystack,string needle) 在haystack中从头寻找needle，从needle的下一个字符一直截取到最后
string strchr(string haystack,string needle) 在haystack中从后往前找

int substr_count(string haystack,string needle) 返回needle在haystack中出现的次数

mixed str_ireplace(mixed search,mixed replace,mixed subject[,int &count]) 将所有在参数subject中出现的参数search以参数replace取代，参数count表示取代字符串执行的次数 本函数不区分大小写

如需对大小写区分可使用str_replace

格式化字符串
数字字符串格式化
string number_format(float number[,int num_decimal_places,][string dec_seperator,string thousands_separator]);
number_format可以有1个 2个 4个参数，不能是3个参数
1个参数：舍弃小数点后的值，且第3位数字就会以逗号来隔开
2个参数，number格式化后会到小数点第num_decimal_places位，且第3位数字就会以逗号来隔开
4个参数，number格式化后会到小数点第num_decimal_places位，dec_seperator用来代替小数点，thousands_separator用来代替第3位数字隔开的逗号

分割字符串
array explode(string separator,string str[,int limit]) 将字符串str以separator分割，如果设置了limit参数，返回的数组中最多有limit个值

$arr=array(1,2,3,4,5);
echo $arr;//Array
print_r($arr);//Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 )

string implode(string glue,array pieces) 将数组pieces通过glue连接起来

([a-z])([A-Z])\1\2 相当于 (?P<fir>[a-z])(?P<sec>[A-Z])(?P=fir)(?P=sec)

(?P<dir>[a-z]) 是给[a-z]这个分组起一个名字dir
(?P=fir) 反向引用fir这个名字

模式修饰符
i	忽略大小写
m	多行文本 字符串内有多个换行符时会影响^和$的匹配
s	单文本模式 在此模式下，元字符点号(.)可匹配换行符，其他模式不可以匹配换行符
x	忽略空白字符
模式修饰符的三种写法：例如要匹配tm这两个字母
/tm/i (?i)tm(?-i) (?i:tm)

POSIX扩展正则表达式函数
bool ereg/eregi(string pattern,string string[,array regs])
在字符串string中匹配表达式pattern，如果匹配成功则返回true，失败返回false，如果有第3个参数regs，则将成功匹配的字串按子串划分，并存储到regs数组中 ereg区分大小写 eregi不区分大小写
$ereg='^[$][[:alpha:]_][[:alnum:]]*'; //[:alpha:]和[:alnum:]是POSIX风格的预定义字符类 分别等同于[a-zA-Z]和[a-zA-Z0-9]
ereg($ereg,'$_name',$register);
var_dump($register); //array(1){[0]=>string(6)"$_name"}

string ereg_replace/eregi_replace(string pattern,string replacement,string string) ereg_ireplace不区分大小写

string split/spliti(string pattern,string string[,int limit]) 如果函数错误则返回false

PGRE兼容正则表达式函数 注:无论从执行效率还是语法支持上，PCRE函数都要略优于POSIX函数
array preg_grep(string pattern,array input) 使用数组input中的元素一一匹配表达式pattern，最后返回由所有相匹配的元素组成的数组

int preg_match/preg_match_all(string pattern,string subject[,array matches])
在字符串subject中匹配表达式pattern，函数返回匹配的次数，如果有数组matches，那么每次匹配的结果都将被存储到数组matches中

preg_match返回值是0或1，因为该函数在匹配成功1次后就停止了，preg_match_all函数会一直匹配到最后才停止，所以参数array matches对于preg_match_all函数来说是必须有的，而对前者可以省略

string preg_quote(string str[,string delimiter]) 将字符串str中的所有特殊字符进行自动转义，如果有参数delimiter那么该参数所包含的字符串也将被转义，函数返回转义后的字符串，注意：这里说的特殊字符是指正则表达式中具有一定意义的元字符，其他诸如@ #等则不会被当做特殊字符处理
$str='< b';
$str2='b';
$match_one=preg_quote($str,$str2);
echo $match_one;// \< \b

mixed preg_replace(mixed pattern,mixed replacement,mixed subject[,int limit])
在字符串subject中匹配表达式pattern，并将匹配项替换成replacement，如果有limit，则替换limit次

$string='[b]粗体字[/b]';
$b_rst=preg_replace('/\[b\](.*)\[\/b\]/i','<b>$i</b>',$string); //$0表示整个正则的匹配值 $1 $2...依次表示从左到右的分组顺序，也就是括号顺序
echo $b_rst;// 粗体字

mixed preg_replace_callback(mixed pattern,callback callback,mixed subject[,int limit]);//类似preg_replace

function c_back($str){
	$str="<font color=$str[1]>$str[2]</font>";
	return $str;
}
$string='[color=blue]字体颜色[/color]';
echo preg_replace_callback('/\[color=(.*)\](.*)\[\/color\]/U',"c_back",$string);

array preg_split(string pattern,string subject[,int limit]); 与limit使用方法相同


数组的定义：
$array=array("asp","php","jsp");

通过下标访问数组中的元素$array[1];

以数字作为键的数组叫数字索引数组，字符串作为键的数组叫做关联数组

二维数组：
$str=array(
	"book"=>array("chinese","math","english"),
	"fruit"=>array("apple","pear","banana")
);

遍历：
foreach($url as $link){
	//$link是遍历到各项的值
};

each函数用于返回当前指针位置的数组值，同时将指针推进到下一个位置，返回的数组包含4个键，键0和key包含键名，而键1和value包含相应的数据，如果程序在执行each函数时指针已经位于数组末尾，则返回false


字符串切分成数组:array explode(string separator,string string[,int limit]) 返回的数组中最多包含limit个元素，最后的那个元素将包含string的剩余部分，
如果separator为空字符串""，explode函数将返回false，
如果separator所包含的值在string中找不到，那么explode函数将返回包含string单个元素的数组，
如果limit是负数，则返回除了左后的limit个元素外的所有元素

将数组中各项合并为一个字符串
string implode(string glue,array pieces)

统计数组中元素个数
int count(mixed array[,int mode]) 默认为0 如果设置为COUNT_RECURSIVE(1) 则递归计算长度

查询数组中指定元素
mixed array_search(mixed needle,array haystack[,bool strict]); //needle指定在数组中搜索的值，参数haystack指定被搜索的数组，参数strict为可选参数，如果值为true，还将在数组中检查给定值的类型

array_pop 获取并返回数组的最后一个元素，并将数组的长度减1，如果数组为空或不是数组将返回null

int array_push(array array,mixed var[,mixed var ...]);

//去重
array array_unique(array array)

PHP与web页面的交互
form标签的属性介绍：
enctype设置表单内容的编码方式
target设置返回信息的显示方式，值有_blank _parent _self _top

file类型的表单在实现上传文件功能时必须将enctype属性设置为"multipart/form-data"

textarea wrap属性用于设置显示和送出时的换行方式 off表示不自动换行 hard表示自动硬回车换行 换行标记一同被发送到服务器 soft表示自动软回车换行 换行标记不会被发送到服务器

PHP参数传递的常用方法有3种：$_POST[] $_GET[] $_SESSION[]

string urlencode(string str) 将字符串str进行URL编码

string urldecode(string str) 将字符串str进行URL解码

PHP语言中默认设置的是格林威治标准时间，所以要获取本地当前时间必须更改PHP语言中的时区设置
方法1：php.ini文件中找到[date]下的";date.timezone=" 将其修改为date.timezone=Asia.Hong_Kong

date_default_timezone_set(timezone)

int mktime(int hour,int minute,int second,int month,int day,int year,int [is_dst])
参数year可以是两位数或4位数，0-69对应于2000-2069，70-100对应于1970-2000

参数is_dst在夏令时可以被设置为1，如果不是则设置为0，如果不确定是否为夏令时则设置为-1(默认值)

//获取当前时间戳 int time()

//获取当前日期和时间 date(string format[,int timestamp]) timestamp不传时代表当前时间

array getdate(int timestamp) timestamp不传时代表当前时间
$arr=getdate();
echo $arr[year]."-".$arr[mon]."-".$arr[mday]

//检验日期的有效性
bool checkdate(int month,int day,int year)

//改变PHP默认的本地化环境
string setlocale(string category[,string locale])
category选项：
LC_ALL 包含了下面所有的设置本地化规则
LC_COLLATE 字符串比较
LC_CTYPE 字符串分类和转换，如转换大小写
LC_MONETARY 本地化环境的货币形式
LC_NUMERIC 本地化环境的数值形式
LC_TIME 本地化环境的时间形式

locale如果为空，就会使用系统环境变量的locale或lang的值，否则就会应用locale参数所指定的本地化环境，如en_US为美国本地化环境，chs为简体中文

根据本地化环境设置来格式化输出日期和时间
string strftime(string format,int timestamp) 用给定的字符串对参数timestamp进行格式化后输出的字符串
setlocale(LC_ALL,"chs");
strftime("%A"); //星期三

//将任何英文文本的日期和时间解析为UNIX时间戳，其值是相对于参数now给定的事件，如果没有提供此参数now则用系统当前时间
int strotime(string time[,int now])


创建Cookie：在PHP中通过setcookie()方法创建Cookie，Cookie是HTTP头标的组成部分，而头标必须在页面其他内容之前发送，因此它必须最先输出，若咋setcookie()函数前输出一个HTML标记、echo语句，甚至一个空行都会导致程序出错
bool setcookie(string name[,string value[,int expire[,string path[,string domain[,int secure]]]]])
通过$_COOKIE可以获取到cookie值
expire: 如果不设置Cookie的失效时间，那么Cookie将永远有效，除非手动将其删除
path: 如果该参数设置为"/" 则它在整个domain内有效，如果设置为"/11"，它在domain下的/11目录及子目录内有效，默认是当前目录
domain: Cookie有效的域名
secure: 指明Cookie是否仅通过安全的HTTPS，值为0或1，如果值为1，则Cookie只能在HTTPS连接上有效，如果值为0，则Cookie在HTTP和HTTPS连接上均有效

创建会话的步骤：启动会话->注册会话->使用会话->删除会话
启动会话：两种方式：session_start() session_register()
session_start函数在页面开始位置调用，然后会话变量被登录到数据$_SESSION
使用session_start()函数之前浏览器不能有任何输出，否则会产生错误
session_register函数用来为会话创建一个变量来隐含地启动会话，但要求设置php.ini文件的选项，即将register_globals指令设置为on

使用session_register函数时，不需要调用session_start函数，PHP会在创建变量之后隐含地调用session_start函数

注册会话：$_SESSION["admin"]=123;

使用会话：$_SESSION["admin"]

删除会话：unset($_SESSION("user"))

unset($_SESSION)会将全局变量$_SESSION销毁，而且没办法恢复，用户也不能在注册$_SESSION变量，如果要删除多个或全部会话，可以采用：$_SESSION=array(); 或者 session_destroy();

session设置失效时间：
1、客户端没有禁止cookie的情况下：session_set_cookie_params(60) 就是设置session在1分钟后失效
session_set_cookie_params必须在session_start之前调用 不推荐使用该函数，该函数在有些浏览器上回出问题，所以一般手动设置失效时间：setcookie(session_name(),session_id(),time()+$time,"/")


在服务器中，如果将所有用户的Session都保存在临时目录中会降低服务器的安全性和效率，打开服务器存储的站点会非常慢，在PHP中，使用函数session_save_path()可以解决这个问题：
$path="./tmp/";
session_save_path($path);
session_start();
$_SESSION[username]=true;

Session缓存
string session_cache_limiter([string cache_limiter]) 参数cache_limiter为public或private，缓存时间的设置：int session_cache_expire([int new_cache_expire]) 这两个Session缓存函数必须在session_start()调用之前使用，否则出错

Session数据库存储
bool session_set_save_handler(string open,string close,string read,string write,string destroy,string gc)
open(save_path,session_name) 找到Session存储地址，取出变量名称
close() 不需要参数，关闭数据库
read(key) 读取Session键值，key对应session_id
write(key,data) 其中data对应设置的Session变量
destroy(key) 注销Session对应Session键值
gc(expire_time) 清除过期Session记录

该函数在调用时只是调用函数名称的字符串

封装session_open函数
function __session_open($save_path,$session_name){
	global $handle;
	$handle=mysql_connect("localhost","root","root") or die("数据库连接失败");
	mysql_select_db("db_database11",$handle) or die("数据库中没有此库名")；
	return(true);
}
封装session_close函数
function _session_close(){
	global $handle;
	mysql_close($handle);
	return(true);
}

function _session_read($key){
	global $handle;
	$time=time();
	$sql="select session_data from tb_session where session_key='$key' and session_time>$time";
	$result=mysql_query($sql,$handle);
	$row=mysql_fetch_array($result);
	if($row){
		return($row["session_data"]);
	}else{
		return(false);
	}
}

function _session_write($key,$data){
	global $handle;
	$time=60*60;
	$lapse_time=time()+$time;
	$sql="select session_data from tb_session where session_key='$key and session_time>$lapse_time'";
	$result=mysql_query($sql,$handle);
	if(mysql_num_rows($result)==0){
		$sql="insert into tb_session values('$key','$data',$lapse_time)";
		$result=mysql_query($sql,$handle);
	}else{
		$sql="update tb_session set session_key='$key',session_data='$data',session_time=$lapse_time where session_key='$key'";
		$result=mysql_query($sql,$handle);
	}
	return($result);
}

function _session_destroy($key){
	global $handle;
	$sql="delete from tb_session where session_key='$key'";
	$result=mysql_query($sql,$handle);
	return($result);
}

function _session_gc($expiry_time){
	global $handle;
	$lapse_time=time();
	$sql="delete from tb_session where expiry_time<$lapse_time";
	$result=mysql_query($sql,$handle);
	return($result);
}

//文件操作
resource fopen(string filename,string mode[,bool use_include_path])
filename是要打开的包含路径的文件名，可以是相对路径，也可以是绝对路径，如果没有任何前缀表明打开的是本地文件
mode:
r  只读		文件指针位于文件开头
r+ 读写		文件指针位于文件开头	在现有文件内容的末尾之前进行写入就会覆盖原有内容
W  只写		文件指针位于文件开头	如果文件存在，则所有文件内容被删除，否则函数将创建这个文件
w+ 读写		文件指针位于文件开头	如果文件存在，则所有文件内容被删除，否则函数将创建这个文件
x  谨慎写	文件指针位于文件开头	如果文件存在，则该文件将不会被打开，函数返回false，PHP将产生一个警告
x+ 谨慎写	文件指针位于文件开头	如果文件存在，则该文件将不会被打开，函数返回false，PHP将产生一个警告
a  追加		文件指针位于文件结尾	如果文件已有内容，则将从文件末尾开始追加，如果该文件不存在，则函数将创建这个文件
a+ 追加		文件指针位于文件开头	如果文件已有内容，则将从文件末尾开始追加，如果该文件不存在，则函数将创建这个文件
b  二进制	用于与其他模式进行连接，如果文件系统能够区分二进制文件和文本文件，可能会使用它。Windows可以区分，Unix则不区分。推荐使用该选项，便于得到最大程度的可移植性，它是默认模式
t  文本		用于与其他模式的结合，这个模式只是Windows下的一个选项

关闭文件
bool fclose(resource handle) fclose关闭的文件指针必须有效，并且是通过fopen函数成功打开的文件

int readfile(string filename) 读入一个文件并将其写入到输出缓冲，如果出现错误则返回false 使用该函数不需要打开/关闭文件

array file(string filename) 将文件内容按行存放到数组中包括换行符，如果读取失败返回false

string file_get_contents(string filename[,int offset[,int maxlen]]) 将整个文件读入到一个字符串 从offset所指定的位置开始读取长度为maxlen的一个字符串，如果读取失败返回false 该函数仅适用于二进制文件

string fgets(resource handle[,int length]) 一次读取一行数据，返回长度最大值为length-1个字节的字符串，遇到换行 EOF 或者读取了length-1个字节后停止，如果忽略length参数，那么读取数据直到行结束

string fgetss(resource handle[,int length[,string allowable_args]]) 该函数能够从读取的文件中过滤掉任何html和php标记，可以使用allowable_tags参数来控制哪些标记不被过滤掉

string fgetc(resource handle) 该函数返回一个字符，该字符从handle指向的文件中得到，遇到EOF返回false

string fread(resource handle,int length) 从文件中读取指定长度的数据 当函数读到length个字节或到EOF时停止执行

//文件写入
int fwrite(resource handle,string string[,int length]) 将内容string写入指针handle所指向的文件，如果指定了参数length，则写入length个字节后停止；如果文件内容长度小于length，则会输出全部文件内容

file_put_contents 是php5新增的函数，语法为：
int file_put_contents(string filename,string data[,int flags])
flags参数可以是FILE_INCLUDE_PATH FILE_APPEND LOCK_EX其中LOCK_EX为独占锁定

使用file_put_contents函数和依次使用fopen fwrite fclose函数所实现的功能一样

bool copy(string path1,string path2) 从path1复制到path2 成功返回true 失败返回false
bool rename(string filename1,string filename2) 将filename1重命名为filename2
bool unlink(strin filename) 成功返回true 失败返回false
int fileatime(string filename) 返回文件最后一次被访问的时间
int filemtime(string filename) 返回文件最后一次被修改的时间
int filesize(string filename) 单位为字节
array pathinfo(string name[,int options]) 返回一个数组，包含文件name的路径信息，有dirname basename extension 可以通过options设置要返回的信息，有PATHINFO_DIRNAME PATHINFO_BASENAME PATHINFO_EXTENSION 默认返回全部
string realpath(string filename) 返回文件filename的绝对路径
array stat(string filename) 返回一个数组，包括文件的相关信息

//目录处理
打开目录
resource opendir(string path) 如果出错则返回false并产生一个E_WARNING级别的错误信息，可以在opendir()前面加上@符号来屏蔽错误信息的输出
void closedir(resource handle)

bool is_dir(string path) 判断是否为合法的目录

array scandir(string directory[,int sorting_order]) 该函数返回一个数组，包含directory中的所有文件和目录，参数sorting_order指定排序顺序，默认按字母升序排序

bool mkdir(string pathname)
bool rmdir(string dirname) dirname必须为空才可以删除
string getcwd(void)
bool chdir(string directory) 改变当前目录为directory
float disk_free_space(string directory) 返回目录中的可用空间 被检查的文件必须通过服务器的文件系统访问
float disk_total_space(string directory) 返回目录总空间大小
string readdir(resource handle) 返回目录中下一个文件的文件名，使用此函数时目录必须是使用opendir函数打开的，在PHP5之前都是使用这个函数来浏览目录的
void rewinddir(resource handle) 将指定的目录重新指定到目录的开头

远程文件的访问：在php.ini中将allow_url_fopen选项设为on，即可使用http或ftp的url格式
fopen("http://127.0.0.1/tm/index.php","rb");

bool rewind(resource handle) 将文件handle的指针设为文件流的开头

如果文件以追加("a")模式打开，写入文件的任何数据总是会被附加在文件已有内容的末尾，不论文件指针的位置在何处

int fseek(resource handle,int offset[,int whence]) fseek函数实现指针的定位，offset为指针位置或相对whence参数的偏移量，可以是负值，whence的值包括：
SEEK_SET 位置等于offset字节
SEEK_CUR 位置等于当前位置加上offset字节
SEEK_END 位置等于文件尾加上offset字节
默认为SEEK_SET

bool feof(resource handle) 如果文件指针到了文件结束的位置就返回true否则返回false

int ftell(resource handle) 返回当前指针的位置

//在向一个文本文件写入内容时，需要先锁定该文件，以防其他用户同时修改此文件内容
bool flock(resource handle,int operation) operation的值可以是
LOCK_SH 取得共享锁定
LOCK_EX 取得独占锁定
LOCK_UN 释放锁定
LOCK_NB 防止flock()在锁定时堵塞

文件上传：文件上传可以通过http协议来实现，要使用文件上传功能，首先要在php.ini配置文件中对上传做一些设置，然后了解预定义变量$_FILES，通过$_FILES的值对上传文件做一些限制和判断，最后使用move_uploaded_file()函数实现上传

配置php.ini文件
需要在php.ini中开启文件上传，并对其中的一些参数作出合理的设置，找到File Uploads项，可以看到下面3个属性，表示含义如下：
file_uploads：如果值为on，说明服务器支持文件上传，如果为off，则不支持
upload_tmp_dir：上传文件临时目录，在文件被成功上传之前，文件首先存放到服务器端的临时目录中。如果想要指定位置，可以在这里设置，否则使用系统默认目录
upload_max_filesize：单位为MB 系统默认为2MB

除了File Uploads项，还有几个属性也会影响到上传文件的功能
max_execution_time：PHP中一个指令所能执行的最长时间，单位是秒
memory_limit：PHP中一个指令所分配的内存空间，单位是MB


$_FILES变量存储的是上传文件的相关信息
$_FILES[filename][name]
$_FILES[filename][size]
$_FILES[filename][tmp_name] 在临时目录中的名字
$_FILES[filename][type]
$_FILES[filename][error] 存储上传文件后的结果，如果值为0，说明上传文件成功


文件上传函数
bool move_uploaded_file(string filename,string destination) 该函数将上传文件存储到指定位置，如果成功返回true，失败返回false
参数filename是上传文件的临时文件名，即$_FILES[filename][tmp_name]，参数destination是上传后保存的新的路径和名称

面向对象
class SportObject{
	//类里面的函数就叫成员方法
	function beatBasketball(){}
	
	//类里面的变量就叫成员变量，语法：关键字 成员变量名，关键字可以使用public private protected static final中的任意一个
	public $name;
	
	//类常量
	const BOOK_TYPE="计算机图书";
	
	public function __construct($name){
		$this->name=$name; //注：$this->name中的name没有$符号
	}
	
	function __destruct(){
		echo "对象被销毁时调用";
	}
}

$sport=new SportObject();
echo $sport->beatBasketball();
echo SportObject::BOOK_TYPE; //输出常量 调用常量不需要实例化对象

在类内部，get_class($this)将返回本类的类名

::操作符：关键字::变量名/常量名/方法名
这里的关键字分为以下3种情况：
parent 可以调用父类中的成员变量、成员方法、常量
self 可以调用当前类中的静态成员和常量
类名 可以调用本类中的变量、常量和方法

调用静态成员的格式：
关键字::静态成员
关键字可以是：
self，在类内部调用静态成员时所使用
静态成员所在的类名，在类外部调用类内部的静态成员时所使用

final的使用：
final class Aaa{}
final function method(){}

抽象类至少要包含一个抽象方法 抽象方法没有方法体 抽象方法的格式：abstract function abstractName();

接口：
interface InterfaceName{
	function interfaceName1();
	function interfaceName2();
}
不能用public以外的关键字来修饰接口中的类成员，对于方法不写关键字也可以

假设$book1的type属性是"book"
$book1=new SportObject();
$book2=$book1;
$book2->setType("computer");
echo $book1->getType(); //PHP5的返回值是"computer" PHP4的返回值是book

PHP5中想要克隆对象需要用clone关键字：$object2=clone $object1;

__clone方法：
class SportObject{
	private $object_type="book";
	public function setType($type){
		$this->object_type=$type;
	}
	public function getType(){
		return $this->object_type;
	}
	public function __clone(){
		$this->object_type="computer";
	}
}
$book1=new SportObject();
$book2=clone $book1;
echo $book1->getType();//"book"
echo $book2->getType();//"computer"

在比较两个对象的时候两个等号比较两个对象的内容，3个等号比较对象的引用

PHP中也有和js里一样的类型检测方法：instanceof 用法和js中的instanceof一样

__set魔术方法：当程序试图写入一个不存在或不可见的成员变量时，PHP会执行__set方法，__set方法包含两个参数，分别表示变量名称和变量值，两个参数都不可以省略
__get魔术方法：当程序调用一个未定义或不可见的成员变量时，可以通过__get()方法来读取变量值，__get方法有一个参数，表示要调用的变量名

__call方法的作用是当程序试图调用不存在或不可见的成员方法时，PHP会先调用__call()方法来存储方法名及其参数，__call()方法包含两个参数，即方法名和方法参数，其中方法参数是以数组形式存在的
class SportObject{
	public function myDream(){}
	public function __call($method,$parameter){
		
	}
}

PHP使用serialize函数可以实现序列化对象，在使用serialize函数时，如果实例化的对象包含__sleep方法则会先执行__sleep方法，该方法可以清除对象并返回一个包含该对象中所有变量的数组，使用__sleep方法的目的是关闭对象可能具有的类似数据库连接等善后工作，unserialize函数功能是反序列化，__wakeup则是恢复在序列化中可能丢失的数据库连接及相关工作
class SportObject{
	private $type="DIY";
	public function getType(){
		return $this->type;
	}
	public function __sleep(){
		echo "使用serialize()函数将对象保存起来，可以存放到文本文件，数据库等地方";
		return $this;
	}
	public function __wakeup(){
		echo "当需要改数据时，使用unserialize()函数对已序列化的字符串进行操作，将其转换回对象";
	}
}
$myBook=new SportObject();
$i=serialize($myBook);
echo $i;
$reBook=unserialize($i);
echo $reBook->getType();


============
__toString()函数
class SportObject{
	private $type="DIY";
	public function __toString(){
		return $this->type;
	}
}
$myComputer=new SportObject();
echo $myComputer;//如果没有实现__toString方法而直接将对象打印出来将会报错 而且在输出对象时，echo或print函数后面直接跟要输出的对象，中间不要加多余的字符，否则__toString方法不会被执行，如echo "子串".$myComputer echo "".$myComputer都不可以

如果一个页面中引进很多类，需要使用require_once或include_once一个一个引入
PHP5通过__autoload()方法解决了该问题，__autoload方法可以自动实例化需要使用的类，当程序要用到一个类，但该类还没有被实例化时，PHP5将调用__autoload方法，在指定的路径下自动查找和该类名称相同的文件，如果找到，程序则继续执行，否则报错
function __autoload($class_name){
	$class_path=$class_name.".class.php";
	if(file_exists($class_path)){
		include_once($class_path);
	}else{
		echo "类路径错误";
	}
}

PHP中能对数据进行加密的函数有crypt() md5() sha1() 还有加密扩展库Mcrypt和Mash

string crypt(string str[,string salt]) salt为加密时使用的干扰串，如果省略第二个参数salt，则会随机生成一个干扰串。crypt()函数支持4中算法和salt参数的长度
算法			salt长度
CRYPT_STD_DES	2-character(默认)
CRYPT_EXT_DES	9-character
CRYPT_MD5		15-character(以$1$开头)
CRYPT_BLOWFISH	16-character(以$2$开头)

string md5(string str[,bool raw_output]) str为要加密的明文，raw_output参数如果设为true，则函数返回一个二进制形式的密文，该参数默认为false，返回一个128字节位的数值

string sha1(string str[,bool raw_output]) 返回40位的十六进制数，如果raw_output为true，则返回一个20位的二进制数，默认raw_output为false

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] 表名 [(create_definition,...)][table_options][select_statement]
TEMPORARY			如果使用该关键字，表示创建一个临时表
IF NOT EXISTS		该关键字用于避免表不存在时MySql报告的错误
create_definition	表的列属性部分，Mysql要求在创建表时，表至少包含一列
table_options		表的一些特性参数
select_statement	SELECT语句描述部分，用它可以快速地创建表


create_definition部分，每一列定义的具体格式如下：
col_name type [NOT NULL|NULL] [DEFAULT default_value] [AUTO_INCREMENT] [PRIMARY KEY] [reference_definition]

PRIMARY KEY表示是否为主键，如果表中没有一个PRIMARY KEY，而某些应用程序需要PRIMARY KEY，Mysql将返回第一个没有任何NULL列的UNIQUE键作为PRIMARY KEY
reference_definition为字段添加注释

查看表结构
SHOW [FULL] COLUMNS FROM 数据表名 [FROM 数据库名]
SHOW [FULL] COLUMNS FROM 数据表名.数据库名
DESCRIBE 数据表名
DESC 数据表名 列名

修改表结构
ALTER[IGNORE] TABLE 数据表名 alter_spec[,alter_spec]
当指定IGNORE时，如果出现重复关键的行，则只执行一行，其他重复的行被删除
alter_spec定义要修改的内容，语法如下：
alter_specification:
	ADD [COLUMN] create_definition [FIRST|ALTER column_name]
	ADD INDEX [index_name] (index_col_name,...)
	ADD PRIMARY KEY(index_col_name,...)
	ADD UNIQUE [index_name] (index_col_name,...)
	ALTER [COLUMN] col_name {SET_DEFAULT literal|DROP DEFAULT}
	CHANGE [COLUMN] old_col_name create_definition
	DROP [COLUMN] col_name
	DROP PRIMARY KEY
	DROP INDEX index_name
	RENAME [AS] new_tbl_name
	table_options

通过alter修改表列的前提是必须将表中数据全部删除，然后才可以修改
RENAME TABLE 数据表名1 To 数据表名2

DROP TABLE IF EXISTS 数据表名

insert into 数据表名(column_name,column_name2,...) values (value1,value2,...)

select selection_list
from 数据表名
where primary_constraint	//查询时需要满足的条件，行必须满足的条件
group by grouping_columns
order by sorting_columns
having secondary_constraint	//查询时满足的第二个条件
limit count

多表查询：
select * from tb_student,tb_sscore where tb_student.userid=tb_sscore.sid and tb_student.userid=001;

修改记录update
update 数据表名 set column_name=new_value1,column_name2=new_value2,...[where condition]

删除记录
delete from 数据表名 where condition

数据库备份
mysqldump -uroot -proot db_database16 >F:\db_database16.txt;
F:\db_database16.txt是数据库备份存储的位置

数据的恢复
mysql -uroot -proot db_database <F:\db_database16.txt;

PHP访问Mysql的步骤：
连接Mysql服务器		mysql_connect()		mysql_pconnect()持续连接 建立的持续连接在本程序结束时，不需要调用mysql_close()来关闭与数据库服务器的连接，下次程序在此执行mysql_pconnect()函数时，系统自动直接返回已经建立的持续连接ID号，而不再去真的连接数据库
选择Mysql数据库		mysql_select_db()
执行sql语句			mysql_query()
关闭结果集			mysql_free_result($result)
关闭Mysql服务器		mysql_close($Link)

$link=mysql_connect("localhost","root","root") or die("不能连接到数据库，可能是数据库服务器没启动，或用户名密码错误".mysql_error());
if($link){
	echo "数据源连接成功";
}

$link=mysql_connect("localhost","root","root") or die("不能连接到数据库服务器");
$db_selected=mysql_select_db("db_database18",$link); //或者用$db_selected=mysql_query("use db_database18",$link);
if($db_selected){
	echo "数据库选择成功";
}

如果SQL语句是查询指令select，成功则返回查询后的结果集，失败则返回false，如果SQL语句是insert delete update等操作指令，成功则返回true，失败则返回false
mysql_unbuffered_query()函数向Mysql发送一条SQL查询语句，但不获取和缓存结果集，它不像mysql_query函数那样自动获取并缓存结果集，一方面，这在处理很大的结果集时会节省可观的内存，另一方面，可以在获取第一行后立即对结果集进行操作，而不用等到整个SQL语句都执行完毕

$result=mysql_query("insert into tb_member values('tm','111','tm@tmsoft.com')",$link);
$result=mysql_query("update tb_member set user='纯净水',pwd='1025' where user='tm'",$link);
$result=mysql_query("delete from tb_member where user='纯净水'",$link);
$result=mysql_query("select * from tb_member",$link);
$result=mysql_query("DESC tb_member");

array mysql_fetch_array(resource result[,int result_type])
result_type：整型参数，要传入的是MYSQL_ASSOC(关联索引) MYSQL_NUM(数字索引) MYSQL_BOTH(同时包含关联和数字索引的数组)3中索引类型，默认为MYSQL_BOTH，本函数返回的字段名区分大小写

$result=mysql_query("select * from tb_member",$link);
$info=mysql_fetch_array($result);
if($info==false){
	echo "信息不存在";
}

do{
	echo $info[bookname];
}while($info=mysql_fetch_array($sql));

mysql_fetch_object函数同样可以获取查询结果集中的数据，该函数返回的是一个对象而不是数组，该寒素只能通过字段名来访问数组，本函数返回的字段名区分大小写

$sql=mysql_query("select * from tb_book");
$info=mysql_fetch_object($sql);
do{
	echo $info->id;
}while($info=mysql_fetch_object($obj));

mysql_fetch_row函数可以逐行获取结果集中的每条记录
array mysql_fetch_row(resource result)
mysql_fetch_row函数从和指定的结果标识关联的结果集中获取一行数据并作为数组返回，将此行赋予数组变量$row，每个结果的列存储在一个数组元素中，下标从0开始，即以$row[0]的形式访问第一个数组元素，依次调用mysql_fetch_row()函数将返回结果集中的下一行，直到没有更多行则返回false


while($row=mysql_fetch_row($sql)){
	echo $row[0];
}

int mysql_num_rows(resource result)返回查询结果集中的记录数
使用mysql_unbuffered_query()函数查询到的数据结果无法使用mysql_num_rows()函数来获取查询结果集中的记录数

$conn=mysql_connect("localhost","root","root") or die("数据库服务器连接错误".mysql_error());
mysql_select_db("db_database18",$conn) or die("数据库访问错误".mysql_error());
mysql_query("set names gb2312");
$title=$_POST["txt_title"];
$content=$_POST["txt_content"];
$createtime=date("Y-m-d H:i:s");
$sql=mysql_query("insert into tb_affiche(title,content,createtime) values('$title','$content','$createtime')");
echo "<script>alert('添加成功');window.location.href=add_affiche.php;</script>";
mysql_free_result($sql);
mysql_close($conn);

class ConnDB{
	//var可以理解为public的别名，目前基本上都是用public，很少用var
	var $dbtype;
	var $host;
	var $user;
	var $pwd;
	var $dbname;
	var $conn;
	function ConnDB($dbtype,$host,$user,$pwd,$dbname){
		$this->dbtype=$dbtype;
		$this->host=$host;
		$this->user=$user;
		$this->pwd=$pwd;
		$this->dbname=$dbname;
	}
	function GeConnId(){
		$this->conn=mysql_connect($this->host,$this->user,$this->pwd) or die("数据库服务器连接错误".mysql_error());
		mysql_select_db($this->dbname,$this->conn) or die("数据库选择错误".mysql_error());
		mysql_query("set names gb2312");
		return $this->conn;
	}
	function CloseConnId(){
		$this->conn->Disconnect();
	}
}

class AdminDB{
	function ExecSQL($sqlstr,$conn){
		$sqltype=strtolower(substr(trim($sqlstr),0,6));
		$rs=mysql_query($sqlstr);
		if($sqltype="select"){
			$array=mysql_fetch_array($rs);
			if(count($array)==0||$rs==false){
				return false;
			}else{
				return $array;
			}
		}else if($sqltype=="update"||$sqltype=="insert"||$sqltype=="delete"){
			if($rs){
				return true;
			}else{
				return false;
			}
		}
	}
}

class SepPage{
	var $rs;
	var $pagesize;
	var $nowpage;
	var $array;
	var $conn;
	var $sqlstr;
	var $total;
	var $pagecount;
	function ShowDate($sqlstr,$conn,$pagesize,$nowpage){
		$arrays=array();
		$array_title=array();
		$array_content=array();
		if(!isset($nowpage)||$nowpage==""||$nowpage==0){
			$this->nowpage=1;
		}else{
			$this->nowpage=$nowpage;
		}
		$this->pagesize=$pagesize;
		$this->conn=$conn;
		$this->sqlstr=$sqlstr;
		$this->pagecount=$pagecount;
		$this->total=$total;
		$this->rs=mysql_query($this->sqlstr."limit ".$this->pagesize*($this->nowpage-1).",$this->pagesize",$this->conn);
		$this->total=mysql_num_rows($this->rs);
		if($this->total==0){
			return false;
		}else{
			if(($this->total%$this->pagesize)==0){
				$this->pagecount=intval($this->total/$this->pagesize);
			}else if($this->total<=$this->pagesize){
				$this->pagecount=1;
			}else{
				$this->pagecount=ceil($this->total/$this->pagesize);
			}
			while($this->array=mysql_fetch_array($this->rs)){
				array_push($array_title,$this->array[title]);
				array_push($array_content,$this->array[content]);
			}
			array_push($arrays,$array_title,$array_content);
			return $arrays;
		}
	}
	function ShowPage($contentname,$utils,$anothersearchstr,$class){
		$allrs=mysql_query($this->sqlstr,$this->conn);
		$record=mysql_num_rows($allrs);
		$pagecount=ceil($record/$this->pagesize);
	}
}

===============================PDO
默认情况下PDO在PHP5.2中为开启状态，但是要启用对某个数据库驱动程序的支持仍需要进行相应的配置操作
在php.ini中加载extension=php_pdo.dll，如果想支持某个具体的数据库，那么还要加载对应的数据库选项，例如要支持mysql数据库，则还需要加载extension=php_pdo_mysql.dll选项

PDO中要建立与数据库的连接需要实例化PDO的构造函数，PDO构造函数如下：
__construct(string $dsn[,string $username[,string $password[,array $driver_options]]])
dsn 数据源名称，包括主机名端口号和数据库名称
driver_options 连接数据库的其他选项

header("Content-Type:text/html;charset=utf-8");
try{
	$pdo=new PDO("mysql:host=localhost;dbname=db_database19","root","111");
	echo "PDO连接Mysql成功";
}catch(Exception $e){
	echo $e->getMessage();
}

PDO中执行SQL语句
int PDO::exec(string statement) 返回受影响的行数
PDOStatement PDO::query(string statement) 返回执行查询后的结果集

预处理语句prepare()和execute()方法
通过prepare方法做查询的准备工作，然后通过execute方法执行查询，同时还可以通过bindParam方法绑定参数提供给execute方法，预处理语句的语法如下：
PDOStatement PDO::prepare(string statement[,array driver_options])
bool PDOStatement::execute([array input_parameters])

//PDO中获取结果集
mixed PDOStatement::fetch([int fetch_type[,int cursor_orientation[,int cursor_offset]]])
fetch_style:控制结果集的返回方式，可选值如下：
PDO::FETCH_ASSOC 关联数组形式
PDO::FETCH_NUM 数字索引数组形式
PDO::FETCH_BOTH 两种数组形式都有，默认为该项
PDO::FETCH_OBJ 按照对象的形式，类似于之前的mysql_fetch_object()
PDO::FETCH_BOUND 以布尔值的形式返回结果，同时将获取的列值赋给bindParam()方法中指定的变量
PDO::FETCH_LAZY 以关联数组、数字索引数组和对象3种形式返回结果

cursor_orientation:PDOStatement对象的一个滚动游标，可用于获取指定的一行
cursor_offset:游标的偏移量


try{
	$pdo=new PDO("mysql:host=localhost;dbname=db_database19");
	$query="select * from tb_pdo_mysql";
	$result=$pdo->prepare($query);
	$result->execute();
	while($result->fetch(PDO::FETCH_ASSOC)){
		echo $res["id"];
	}
}catch(PDOException $e){
	die("Error:$e->getMessage()");
}

array PDOStatement::fetchAll(int fetch_type[,int column_index])
column_index:字段索引
返回值是一个包含结果集中所有数据的二维数组
for($i=0;$i<count($result->fetchAll(PDO::FETCH_ASSOC));$i++){
	echo $res[$i]["id"];
}

string PDOStatement::fetchColumn([int column_number])
column_number设置行中列的索引值，该值从0开始，如果省略该参数则将从1列开始取值
通过fetchColumn()方法获取结果集中下一行中指定列的值，注意这里是结果集中下一行中指定列的值


PDO中捕获SQL语句中的错误
3种方案可以选择：
1、使用默认模式PDO::ERRMODE_SILENT
在默认模式中设置PDOStatement对象的errorCode属性，但不进行其他任何操作
$result=$pdo->prepare($query);
$result->execute();
$code=$result->errorCode();
2、使用警告模式PDO::ERRMODE_WARNING
$pdo->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_WARNING);
3、使用异常模式PDO::ERRMODE_EXCEPTION
异常模式会创建一个PDOException，并设置errorCode属性，它可以将执行代码封装到一个try catch 块中，未捕获的异常将会导致脚本中断，并显示堆栈跟踪让用户了解是哪里出现的问题
try{
	$pdo->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);
	$result=$pdo->prepare($query);
	$result->bindParam(":id",$_GET["conn_id"]);
	$result->execute();
}catch(PDOException e){
	echo $e->getMessage();
}

PDO中错误处理
PDO中有两个获取程序中错误信息的方法：errorCode()和errorInfo()
errorCode()用于获取在操作数据库句柄时发生的错误代码，这些错误代码被称为SQLSTATE代码，语法格式如下：
int PDOStatement::errorCode(void)
errorCode()返回一个SQLSTATE代码，是由5个数字和字母组成的
在PDO中通过query()方法完成数据的查询操作，并且通过foreach语句完成数据的循环输出，在定义SQL语句的时候使用一个错误的数据表，并且通过errorCode()方法返回错误代码
try{
	$pdo=new PDO("mysql:host=localhost;dbname=db_database19","root","111");
	$query="select * from tb_pdo_mysqls";
	$result=$pdo->query($query);
	echo $pdo->errorCode();
	foreach($result as $items){
		echo $items["id"];
	}
}catch(PDOException $e){
	die($e->getMessage());
}

errorInfo()用于获取操作数据库句柄时所发生的错误信息，语法格式如下：
array PDOStatement::errorInfo(void)
errorInfo()方法的返回值为一个数组，它包含了相关的错误信息
print_r($pdo->errorInfo());

事务处理
开启事务：beginTransaction
提交事务：commit
回滚事务：rollBack
try{
	$pdo->beginTransaction();
	$query="insert into tb_pdo_mysql(pdo_type,database_name,dates) values(''.$_POST['pdo'])";
	$result=$pdo->prepare($query);
	if($result->execute()){
		echo "数据添加成功";
	}else{
		echo "数据添加失败";
	}
	$pdo->commit();
}catch(PDOException $e){
	die("Error:".$e->getMessage());
	$pdo->rollBack();
}

存储过程
PDO中存储过程允许在更接近于数据的位置操作数据，从而减少带宽的使用，它们使数据独立于脚本逻辑，允许使用不同语言的多个系统以相同的方式访问数据，从而节省了花费在编码和调试上的时间，同时它使用预定义的方案执行操作，提高查询速度，并且能够阻止与数据的直接相互作用，从而起到保护数据的作用

创建存储过程的SQL语句
drop procedure if exists pro_reg;
delimiter //
create procedure pro_reg (in nc varchar(80),in email varchar(80),in address varchar(50))
begin
insert into tb_reg(name,pwd,email,address) values(nc,pwd,email,address)
end;
//

delimiter //作用是将语句结束符更改为//

PDO中通过CALL语句调用存储过程，实现用户注册信息的添加操作
$query="call pro_reg('$nc','$pwd','$email','$address')";

TP框架
TP目录结构
TP框架中目录结构分为两部分：系统目录和项目目录，系统目录是下载的TP框架类库本身的
Common	包含框架的一些公共文件、系统定义和管理配置等
Lang	目录语言文件夹
Lib		系统的基类目录
Tpl		系统的模板目录
Mode	框架模式扩展目录
Vendor	第三方类库目录

项目目录是用户实际应用的目录
index.php	项目入口文件
Common		项目公共目录，放置项目公共函数
Lang		项目语言包目录
Conf		项目配置目录，放置配置文件
Lib			项目基目录，通常包括Action和Model目录
Tpl			项目模板目录
Runtime		项目运行时目录，包括Cache Temp Data和Log


自动生成项目目录
假设现在要创建名称为1的项目，自动生成项目目录，操作步骤如下：
1、在网站根目录下创建文件夹，命名为1
2、将TP核心类库存储于1目录下
3、编写入口文件index.php，将其存储于1目录下，index.php文件代码如下：

define("THINK_PATH","ThinkPHP");
define("APP_NAME","1");
define("APP_PATH",".");
define(THINK_PATH."/ThinkPHP.php");	//加载框架入口文件
App::run();							//实例化一个网站应用实例

==================================================
创建入口文件
//common 存放当前项目的公共函数
//Conf 存放当前项目的配置文件
//Lang 存放当前项目的语言包
//Lib 存放当前项目的控制器和模型
	//Action
	//Behavior
	//Model
	//Widget
//Runtime 存放当前项目的运行时文件
//Tpl 存放当前项目的模板文件


define("APP_NAME","App");
define("APP_PATH","./App/"); // "./App/"最后的斜线一定要加上
require("./ThinkPHP/ThinkPHP.php");

TP运行过程
1、加载TP require("./ThinkPHP/ThinkPHP.php");
2、加载核心文件 ./ThinkPHP/Lib/Core
3、加载项目的文件，分析URL，调用相关控制器
m	module	模块	控制器
a	action	方法	action = 页面















