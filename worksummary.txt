1、表单校验插件封装问题
2、商品列表页多条件筛选问题，将问题往对象、数组的思路转化
3、后台管理系统商品列表页分页插件封装需要生成真数据，修改后台文件
4、砍价应用弹框，关闭按钮在安卓手机中点多次才生效
5、微信小应用，iPhone中不关闭软键盘在多个输入框之间切换时onChange事件不会触发
6、微信小应用，自己模拟底部导航，高亮状态选中实现不同思路对于后期产品详情页不选中任何一个按钮的影响
7、超能访客，安卓原生弹框和js弹框同时弹出来，导致程序运行异常
8、省市区三级联动返回json格式和html片段的区别、树形菜单数据结构的生成放到服务端，节省性能了吗？
9、将call和apply看为函数对象的方法
10、修改discuz样式，分析整个discuz框架执行的流程
11、Safari浏览器下首页某个js文件需要30s左右才可以加载完成，seajs编译编译过慢
12、微信小程序客户端支付由于没有数据传递没有请求，纯客户端在交互，所以没有安全问题
13、列表左侧选中与不选中，数据异常时如何处理，4种情况：始终可以选中、始终不能选中、选中、非选中


面向对象的理解：
利用表单校验类做类比
继承要从ES3 ES5 ES6依次说明
在面向过程的代码中经常充斥这各种函数，函数之间的调用形成一个很长的栈，而且为了使函数能复用，函数之间有参数的传递，除此之外有一些变量需要被多个函数公用，因此要放到一个层级较高的位置，久而久之，这种依赖关系会变得极为复杂，因此诞生了面向对象，面向对象将一些函数之间传递的参数变成了实例属性，让公用的变量变成静态属性，这样函数就可以转一，复用性也更强，例如一个商品详情页有多个规格，当我们点击规格项改变规格的时候，如果不采用面向对象，则要在规格DOM元素上绑定当前规格的id


关于服务器端渲染对于SEO影响的进一步考虑，可以研究一下爬虫内部的搜索算法，如果爬虫算法是匹配html中<h1>xxx</h1>这样做的，可以把这部分放在jsx中


关于XHR2支持二进制数据传输的进一步考虑


浏览器请求的过程：
由于现代网页通常包含了复数个（>=10）资源，而按照默认设定，一个连接中的每一个请求必须等待收到响应后才能发送下一个请求，所以如果复数的资源请求全部在一个连接one by one发送给服务器显然会很慢，而为了弥补这一缺陷，浏览器通常会默认开启多个TCP连接，然后再根据每个连接的状态在其中依次发送数据请求。各个浏览器允许并行链接数是不一样的，chrome是6个
至于何时关闭TCP请求，由浏览器控制，有两种情况：超时关闭，浏览器发送FIN包，然后等到服务器给客户端发送完数据也发送FIN包，就会关闭

302和304的区别


前端工程化

前端发展史：
浏览器原生DOM API过于底层，操作极为繁琐，因此诞生了prototype和jquery，2014年左右招聘信息上关键词是ext Yui Dojo prototype jquery
随着应用越来越复杂，在js中操作dom变得极为复杂且难以维护，MVC的慢慢被引用前端，2015年左右招聘信息上的关键词是backbone knockout angular1，以angular1最具有代表性，成功脱颖而出
随着流量越来越多流向手机端，angular1的性能问题变得极为突出（依赖注入、脏检测、编译极为耗费性能），2016，对于前端具有分水岭意义的一年，这一年MVC思想大爆发，Angular1势头依然很猛，招聘信息上慢慢开始出现新的关键词：Vue React
由于前端入门简单因此大量的人涌入这个行业，造成中低端前端大量过剩，而前端的要求越来越高，2017年，慢慢恢复理性，开始注重基础能力的提升

2017的主要任务：汇编语言 操作系统 计算机网络
为什么学习操作系统、计算机网络？
计算机网络：日常工作中经常在外网、内网之间切换，经常开虚拟机测试，经常登录远程服务器调试，HTTP请求的具体过程，TCP三次握手建立连接和ajax以及websocket内部具体运行的机制如何，和运维打交道时会有一系列的网络术语，因此非常需要学习
操作系统：以上的案例已经证明了操作系统有多重要的了不必多说，此外操作系统和编译原理有着极为紧密的关系


2018的主要任务：算法、编译、进一步巩固c++和Java
编译：前端框架内部无处不在用编译，但也仅仅用到了编译的前端部分，编译的精华在于后端：优化，优化部分又包括平台相关优化（物理上的优化）、平台无关优化（逻辑上的优化），除此之外浏览器处理各个node节点时建立的dom内存模型是什么样的
算法：遇到一个问题，为何有的人反应非常快，能很清晰的想到一个解决方案，而有的人想不出来，到底差距在哪儿？差在软实力，算法就是一个程序员的软实力、基本功


日常：数学、英语、阅读、历史、社会基础
研究这些的原因：看待一个问题的深度和广度不一样，内心的思考以及做出的行动也不一样，例如前端在工作中遇到某个问题在解决时，仅仅站在前端的角度考虑可能是一种解决方案，站在前后台交互的角度看可能又不一样，站在整个项目来看可能又不一样，站在整个产品体系架构来看又不一样，最后采用什么样的解决方案取决于看待问题的角度和站在什么样的高度，站的越高才看得越远，更何况想要跟公司里那么多人合作开发一定要彼此互相了解对方才可以


有了以上知识作为基础之后可以看一些综合性较强的书籍，例如：
赵炯0.xLinux内核源码注释
APUE
CSAPP
TCP/IP详解卷II
操作系统设计与实现

https://segmentfault.com/a/1190000004322487 你真的会使用XMLHttpRequest吗？