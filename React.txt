React

优势：
1、组件化
2、虚拟DOM 性能高
3、跨平台 移动端

缺点：
1、学习曲线特别陡
2、设计思想有点特别

React全家桶（技术栈）
1、React主体
2、webpack 类似grunt gulp
3、Flex 布局用的
4、React-Route：路由
5、Redux：View层 拆分复杂页面 对于极度复杂的情况才会用到
6、Mocha：测试
7、Istanbul：覆盖率

JSX：
1、增强型JS语法——HTML代码可以直接放在js里面
2、需要编译，通过babel可以编译JSX

babel注意事项：
1、babel里面每个xml节点有且只能有一个顶级元素
2、模板字符串 var oDiv = <div>{aaa}</div>; //将aaa变量输出到div中
3、babel本身是转换ECMAScript6代码的，后期才扩展了JSX

最强：
1、组件化
2、状态


组件：
1、定义组件
class Comp extends React.Component{
	//必须要有render方法
	render(){
		return <span></span>
	}
}
2、使用组件
ReactDOM.render(
	<Comp />
	oDiv
);


//错误写法：<input type="text" onChange="{this.fnChange.bind(this)}"/>
//正确写法：<input type="text" onChange={this.fnChange.bind(this)}/>


组件的Constructor中必须调用super


//style比较特殊，不可以写单花括号，因为style里面的值是成对出现的，而且style的值也不可以是字符串，否则报错
//错误写法：<div className="box" style="{display:this.state.display}"></div>
//错误写法：<div className="box" style="{{display:this.state.display}}"></div>
//正确写法：<div className="box" style={{display:this.state.display}}></div>


组件生存周期:
componentWillMount: 即将挂载 创建之前
componentDidMount: 创建之后

componentWillUpdate: 即将更新 更新之前
componentDidUpdate: 更新之后

componentWillUnmount: 即将卸载
没有componentDidUnmount 组件已经被销毁

componentWillReceiveProps: 组件参数更新时


=============================================================
妙味React
虚拟DOM：通过DOM diff算法，只会更新有差异化的部分，不用渲染整个页面，DOM diff算法在内存中进行

组件化：组件和组件之间耦合度要尽量低，不要有太多依赖

单向数据流：数据是从顶层组件传递到子组件中、数据可控

JSX：js中操作DOM比较传统的方式是创建节点，然后做拼接，拼接字符串时用加号，总之很复杂，因此JSX就提供了html和js混写的方式

<div id="demo"></div>
<script type="text/babel">
	// 组件名FirstComponent首字母必须大写
	var FirstComponent = React.createClass({
		// 当引入mixins实现双向绑定插件时添加该项
		mixins: [React.addons.LinkedStateMixin],
		getInitialState: function(){
			return {
				mes: this.props.value
			};
		},
		render: function(){
			return (
				// 注意，一个组件只能有一个顶层标签，所以必须在最外层用div包一下
				<div>
					<h1>{this.props.title}</h1>,
					// 想要在类型为text的input中使用value，要配合onChange来使用，onChange中C必须大写
					// 注意value的值没有引号
					// 如果不想用onChange，可以将value改成defaultValue即可					
					// <input type="text" defaultValue={this.props.txt} />
					// 这样写是不对的，因为props中的值是不可以改变的，想要改变的话应该用state
					// <input type="text" value={this.props.txt} onChange={this.changeHandle} />
					// 使用state时，内部会通过dom diff算法查找不一样的地方去渲染
					// <input type="text" value={this.state.mes} onChange={this.changeHandle} />
					<input type="text" valueLink={this.linkState('mes')} />
					<input type="button" value={this.props.sendName} />
					<p>{this.state.mes}</p>
					<ul>
						{
							// 这里的map最终会返回一个数组，因此这里实际上会变成
							// [<li>1</li>,<li>2</li>,<li>3</li>]
							this.props.listArr.map(function(item,index){
								// 每个li需要加一个key，每一项的key值不能一样
								return <li key={index}>{item}</li>;
							})
						}						
					</ul>
					// 可以单独将上面的ul提出来成为一个独立的组件
					// <ListComponent listArr={this.props.listArr} />
				</div>
			);
		},
		changeHandle: function(ev){
			console.log(ev.target.value);
			this.setState({
				mes: ev.target.value
			});
		}
	});
	
	var ListComponent = React.createClass({
		render: function(){
			return (
				<ul>
					{
						// 这里的map最终会返回一个数组，因此这里实际上会变成
						// [<li>1</li>,<li>2</li>,<li>3</li>]
						this.props.listArr.map(function(item,index){
							// 每个li需要加一个key，每一项的key值不能一样
							return <li key={index}>{item}</li>;
							
							// 这里的内容很复杂时也可以抽成一个组件，注意必须要有key值
							// return <ItemComponent key={index} item={item} />
						})
					}						
				</ul>
			);
		}
	});
	
	// var title = "标题";
	// var send = "提交";
	var obj = {
		title: "标题",
		send: "提交",
		txt: "请输入",
		listArr: [1,2,3,4,5]
	};
	
	ReactDOM.render(
		// 用了全局变量obj
		// ECMA6中可以这样写：<FirstComponent {...obj} />,
		<FirstComponent title={obj.title} sendName={obj.send} />,
		document.getElementById("demo"),
		function(){
			console.log("渲染完成");
		}
	);
</script>

props：组件初始要渲染的数据，不可改变
state：组件状态发生改变，调用render重新渲染


<div id="demo"></div>
<script type="text/babel">
	// 组件名FirstComponent首字母必须大写
	var FirstComponent = React.createClass({
		// 当引入mixins实现双向绑定插件时添加该项
		mixins: [React.addons.LinkedStateMixin],
		getInitialState: function(){
			return {
				mes: this.props.value,
				listArr:this.props.listArr
			};
		},
		render: function(){
			return (
				// 注意，一个组件只能有一个顶层标签，所以必须在最外层用div包一下
				<div>
					<h1>{this.props.title}</h1>,
					// 想要在类型为text的input中使用value，要配合onChange来使用，onChange中C必须大写
					// 注意value的值没有引号
					// 如果不想用onChange，可以将value改成defaultValue即可					
					// <input type="text" defaultValue={this.props.txt} />
					// 这样写是不对的，因为props中的值是不可以改变的，想要改变的话应该用state
					// <input type="text" value={this.props.txt} onChange={this.changeHandle} />
					// 使用state时，内部会通过dom diff算法查找不一样的地方去渲染
					// ref属性相当于一个唯一标识
					// <input type="text" ref="text_input" value={this.state.mes} onChange={this.changeHandle} />
					<input type="text" valueLink={this.linkState('mes')} />
					<input type="button" onClick={this.addItemHandle} value={this.props.sendName} />
					<p>{this.state.mes}</p>
					// 可以单独将上面的ul提出来成为一个独立的组件
					<ListComponent listArr={this.state.listArr} />
				</div>
			);
		},
		changeHandle: function(ev){
			console.log(ev.target.value);
			this.setState({
				mes: ev.target.value
			});
		},
		addItemHandle: function(){
			var value = this.refs.text_input.value;
			var newArr = this.state.listArr.push(value);
			this.setState({listArr:newArr});
		}
	});
	
	var ListComponent = React.createClass({
		render: function(){
			return (
				<ul>
					{
						// 这里的map最终会返回一个数组，因此这里实际上会变成
						// [<li>1</li>,<li>2</li>,<li>3</li>]
						this.props.listArr.map(function(item,index){
							// 每个li需要加一个key，每一项的key值不能一样
							return <li key={index}>{item}</li>;
							
							// 这里的内容很复杂时也可以抽成一个组件，注意必须要有key值
							// return <ItemComponent key={index} item={item} />
						})
					}						
				</ul>
			);
		}
	});
	
	// var title = "标题";
	// var send = "提交";
	var obj = {
		title: "标题",
		send: "提交",
		txt: "请输入",
		listArr: [1,2,3,4,5]
	};
	
	ReactDOM.render(
		// 用了全局变量obj
		// ECMA6中可以这样写：<FirstComponent {...obj} />,
		<FirstComponent title={obj.title} sendName={obj.send} />,
		document.getElementById("demo"),
		function(){
			console.log("渲染完成");
		}
	);
</script>

==============================================================
npm init是创建package.json的向导

npm install --save Lodash //只写--save会添加到dependences里面，dependences是生产依赖

npm install --save-dev gulp //--save-dev会添加到devDependences里面，devDependencies是开发依赖

npm install --save //卸载的同时会删除在package.json中的依赖

babel 搞清楚四个概念 babel-core plugins presets .babelrc
babel-core是babel的核心，但也没中如果只引入了babel-core，那什么也做不了，但是它为编译其他ES6语法提供了基础
如果将babel和操作系统作类比的话，babel-core相当于一个空白的操作系统
plugins 插件 例如es2015-arrow-function用来编译箭头函数 es2015-spread用来编译spread语法，如果一个一个插件装太麻烦，所以出现了presets预设的概念，相当于很多插件的集合

.babelrc 一个配置文件，需要在该文件中指明需要用到什么presets或plugins，此外还有ignore选项

babel还可以把jsx的语法编译成js的语法，用到的插件如下：
preset-flow
syntax-jsx
transform-react-jsx
transform-react-display-name

npm i -D webpack // 是npm install --save-dev webpack的缩写

webpack.config.js
const path = require("path");
module.exports = {
	// 配置入口，即将src目录下的app.js压缩打包，webpack会分析出app.js里面import了哪些js一起压缩进来
	entry: "./src/app.js", //该路径相对于webpack.config.js本身
	// 程序打包好之后的出口
	output: {
		filename: "main.js",
		// 目的路径必须是绝对路径
		path: path.resolve(__dirname, "dist/assets"),
		// 
		publicPath: "/assets/"
	}
};

完成上述webpack.config.js配置文件之后，需要再在package.json中增加
scripts: {
	"test": "echo \"Error: no test specified\" && exit 1",
	"dev": "webpack", //执行npm run dev就相当于执行webpack命令，即根据webpack.config.js打包文件
	//"start": "node server" //执行npm run start就相当于执行node server命令
}
再在该文件夹下执行npm run dev，就可以将所有的文件压缩打包，将程序跑起来

再新建一个index.html页面，在该html里面引入刚刚打包好的main.js
<script src="../dist/main.js"></script>
这个工作我们之后会自动化，而不是手动引入

正式开始react之前，需要先配置package.json和webpack=============================================
webpack.config.js
const path = require("path");
module.exports = {
	entry: [
		"./src/app.js"
	],
	output: {
		filename: "main.js",
		path: path.resolve(__dirname, "dist/assets"),
		// 打包到dist文件夹里面的index.html文件里面自动加上的script的src中会加上publicPath中设置的/assets/前缀
		publicPath: "/assets/"
	},
	module: {
		rules: [
			{
				// 遇到结尾为js的文件时会用babel-loader插件处理该文件，会在.babelrc中会寻找preset预设的react插件
				test: /\.js$/,
				use: ["babel-loader"],
				include: [
					path.resolve(__dirname, "./src")
				]
			},
			{
				test: /\.css$/,
				use: ["style-loader", "css-loader"]
			}
		]
	},
	plugins: [
		// 开启热替换
		new webpack.HotModuleReplacementPlugin(),
		new HtmlWebpackPlugin({
			// 将template中设置的页面打包到dist目录下，而且还会在该页面中插入script标签，并将js动态引入
			// 此处的路径还可以设置为../in.html等自定义的形式
			filename: "index.html",
			// 源路径
			template: "./src/index.html"
		})
	],
	// 以后再说
	devtool: "cheap-module-eval-source-map"
};

还需要编写server.js，来开启一台开发服务器
const webpack = require("webpack");
const path = require("path");
const webpackDevMiddleware = require("webpack-dev-middleware");
const webpackHotMiddleware = require("webpack-hot-middleware");
const config = require("./webpack.config");
const bs = require("browser-sync").create();

// 将webpack-hot-middleware/client?reload=true插入到webpack.config.js中entry配置项的前面
config.entry.unshift("webpack-hot-middleware/client?reload=true");
// 启动express服务器
let app = new (require("express"))();
let port = 9000;
let compiler = webpack(config);

app.use(webpackDevMiddleware(compiler, {publicPath: "/assets/"}));
app.use(webpackHotMiddleware(compiler));
app.get("/", (req, res) => res.sendFile(path.resolve(__dirname, "src/index.html")));
app.listen(port);


jsx中如果想要使用自定义的属性需要加上data-前缀
此外，对于style属性，值要写成对象形式，内层花括号表示json对象，外层花括号表示把内层对象当成表达式包起来
<span data-abc="123" style={{color: "red"}}></span>


webpack增加配置：
resolve: {
	"node_modules",
	path.resolve(__dirname, "src/common"),
	path.resolve(__dirname, "src/components")
}

加了该配置之后，在页面中的import xxx from xxx中的from后面跟着的路径就会依次从上述路径下寻找
require后面跟着的路径也是同理：<img src={require("img/matthew.png")} />

=====================
let {isHeartON} = this.state;
isHeartON = !isHeartON;
this.state({
	isHeartON // 属性和值的token串是一样的，可以只写一个
})

=======================
setState是异步更新的
setState会引起render的执行，但是会尽可能少的执行render

yearAdd(){
	let {year} = this.state;
	
	this.setState({
		year: year + 10
	});
	// 这里打印出来的year还是原来的值，而不会是加了10之后的值
	// 因为state的更新是异步的
	console.log(this.state.year);
	this.heartClick();
}

yearAdd(){
	let {year} = this.state;
	
	setTimeout(() => {
		this.setState({
			year: year + 10
		});
		// 放到异步函数中之后year变化之后会立即更新
		console.log(this.state.year);
		this.heartClick();
	});	
}

heartClick(event){
	console.log(event.native); // 浏览器原生事件对象
}

后台是做服务的，所以后端路由是在找Controller
前端是做显示的，所以前端路由是在找Component

router4.0将react-router和react-router-dom分开了，在web端只需要引入react-router-dom就可以得到所有的路由的功能
路由也是一个组件，因此只需要在页面中将业务根组件包起来
ReactDOM.render(
	<BrowserRouter>
		<div>
			<Route path="/app" component={App} />
			<Route path="/aaa" component={Aaa} />
			<Route path="/bbb" component={Bbb} />
			<Route path="/ccc" component={
				() => {
					return (
						<div></div>
					);
				}
			} />
		</div>
	</BrowserRouter>
);


redux==========================
import {createStore} from "redux";

// counter函数就是reducer的概念，一个应用中只有一个reducer
function counter(state=0, action){
	let {type} = action;
	
	switch(type){
		case "INCREMENT":
			return ++state;
		default:
			return state;
	}
}
// 一个应用中只有一个store
let store = createStore(counter);

$(document).click(ev => {
	store.dispatch({type: "INCREMENT"});
});

store.subscribe( () => {
	// store既然只有一份，state也只有一份
	let state = store.getState();
	console.log(state);
} );

redux相关概念：Action reducer state store
Action：action就是一个普通的js对象，例如上面例子中的{type: "INCREMENT"}，每个action至少应该有一个type字段
reducer：参数不可以修改，reducer里面不应该修改state，也就是在counter中不可以出现像
function counter(state = {value: 0}, action){
	let {type} = action;
	
	switch(type){
		case "INCREMENT":
			return state += 6; // 错误的做法
		default:
			return state;
	}
}

这样的代码，因为这样做改了state了，而应该写成
function counter(state = {value: 0}, action){
	let {type} = action;
	
	switch(type){
		case "INCREMENT":
			// assign会返回第一个参数，后面的参数会把它们的属性扩展给第一个对象
			// 注意state和{ value: state.value + 6 }的顺序
			return Object.assign({}, state, {
				value: state.value + 6
			});
		default:
			return state;
	}
}

因为counter必须保证每次返回一个新的state对象

状态变化时才会调用subscribe里面绑定的回调
一个应用的store、reducer、state都只有一份

reducer回调（例如上面的counter）的第一个参数是state，第二个参数是action对象，这个参数是固定的，不可以用作别的用途

reducer的工作原则是给定一个特定的状态，reducer也返回一个特定的状态，所谓可预测的状态管理就是这个意思

dispatch的本质就是更新state

======================================
// state存放和Counter相关的对象，注意不是Counter对象本身，Counter对象太大了，里面的方法和状态都是没有关系的，state应该尽量保持轻量
function counter(state = [], action){
	let {type} = action;
	
	switch(type){
		case "ADD_COUNTER":
			// 只需要一个id和一个value属性构成一个对象就可以表示一个Counter
			return [...state, {
				id: new Date().getTime(),
				value: 0
			}];
		default:
	}
}

// 第二个参数是初始化的state对象
let store = createStore(counter, []);

$addCounter.click(ev => {
	// dispatch只去指定改变为哪种状态，不要操作具体的DOM，操作具体DOM的事情要放在subscribe中
	store.dispatch({type: "ADD_COUNTER"});
});

store.subscribe(() => {
	// 拿到状态刷新view
	let state = store.getState();
	$counterPanel.html("");
	state.forEach( data => {
		$counterPanel.append(new Counter(store, data).elt)
	} );
});

class Counter{
	// 第一个参数是createStore创建出来的store
	// 第二个参数实际上是state数组中的一项，我们在此将其中的两个属性id value解构了出来
	constructor(store, {id, value}){
		this.value = value;
		this.store = store;
		this.id = id;
        this.elt = $('<div class="counter"></div>');
		
		let incrementBtn = this.incrementBtn = $('<button class="add"></button>');
		
		this.elt.append(incrementBtn);
		
		this.increment = this.increment.bind(this);
		
		incrementBtn.click( this.increment );
	}
	
	// 只应该指定改变为哪个状态，不应该操作具体的DOM元素
	increment(){
        this.store.dispatch({
			type: "INCREMENT",
			id: this.id
		});
    }
}

当很多地方都需要发起INCREMENT这样一个action的时候，就需要写很多次
this.store.dispatch({
	type: "INCREMENT",
	id: this.id
});

我们可以将其封装为action函数
function increment(id){
	return {
		type: "INCREMENT",
		id
	};
}

甚至可以将this.store.dispatch也封装起来
const boundIncrement = (id) = store.dispatch(increment(id));


thunk中间件====================

class Counter{
	// 这里面可能是某个异步的请求，这个异步请求如果在别的地方也用到了
	// 就得再写一遍，很麻烦，所以我们可以借助中间件来做
	asyncAdd(){
		setTimeout(() => {
			boundIncrement(this.id);
		}, 1000);
	}
}

// 将这个函数返回回来的函数给dispatch传入，从而达到复用的目的
this.store.dispatch(asyncAdd(this.id));
// 注意此时传入的是一个函数，而不是一个对象
// createStore第三个参数需要传入applyMiddleware
function asyncAdd(id){
	return function(dispatch, getState){
		setTimeout(() => {
			dispatch({
				type: "INCREMENT",
				id
			});
		}, 1000);
	};	
}

const addIfOdd = (id, value) => (dispatch, getState) =>{
	// 中间件函数中甚至可以直接return，什么都不做
    if( value%2 === 0 ) return;
    boundIncrement(id);
}

combineReducers=================
function counters(state, action){
	return {
		counterA: counterA(state.counterA, action),
		counterB: counterB(state.counterB, action)
	};
}

// 上面的reducer函数可以改造为下面这样
counters = combineReducers({
	counterA, counterB
});










