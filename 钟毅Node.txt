var a=100;
console.log(global.a);//undefined

Node中有模块的概念，上面定义的a只是在该模块下的一个局部变量，而不属于global

一个文件就是一个模块，每个模块都有自己的作用域

我们使用var来声明的一个变量并不是全局的，而是属于当前模块下的

global.a=200;//这样显式的给global下的b属性赋值才可以，此时如果当前文件(模块)中有一个var a=100;那么console.log(a);是100console.log(global.a);是200

内置全局变量 __filename：当前文件被解析过后的绝对路径
__filename是属于当前模块下的一个属性


模块加载系统
require方法引入模块
require("./2.js");

在NodeJs中require("./2.js")和require("2.js")不是等价的，如果不加./的话Node将理解为要加载node_modules下的模块或者是Node的核心模块


require("./2"); 
//没有扩展名，是可以找到的，首先按照加载的模块的文件名进行查找，如果当前目录下既有a文件，又有a.js文件，则会优先寻找a文件
//不写后缀名时，会先按照2这个名字查找，如果没找到再按2.js这个名字查找，如果仍然没有找到会在文件名后面加上json扩展名查找，如果仍然没有会在文件名后加上node扩展名进行查找，如果还是没找到就会抛出错误


在一个模块中通过var定义的变量，其作用域范围是当前模块，外部模块不能直接访问，外部模块可以通过以下几种方式访问：
1、把变量作为global对象的属性，不推荐
2、使用模块对象 module module对象保存了一些和当前模块有关的一些信息
	module下面的children属性的值就是该模块加载的子模块
	module下面还有exports属性，可以通过这个属性把一个模块中的局部变量对象进行提供访问
	模块中require()方法的返回值就是被加载模块的module.exports对象
	
	模块作用域下还有一个内置全局对象变量：exports，这个内置对象变量其实就是module.exports，在使用的时候需要注意不要破坏二者之间的引用关系，例如：module.exports=[1,2,3];这样的话module.exports就指向了一个数组，此时module.exports和exports的指向就不一样了，此时如果又加了exports.a=111;这样一句代码，a属性就不会被扩展到module.exports对象上了，同理，如果写了exports=[4,5,6];那么[4,5,6]这个数组也不会在require这个模块的时候得到的，因为指向已经断开了


API学习
__filename:该属性并非全局的，而是模块作用域下的，如果访问global.__filename返回的是undefined
__dirname:返回当前模块文件所在目录解析后的绝对路径，该属性也不是全局的，而是模块作用域下的

var d=new Date();
var arr=new Array(1,2,3);


process:进程属性 是global对象下的属性 process和global.process是一致的 通过该属性可以对当前运行的程序的进程进行访问和控制
console.log(process.argv); //返回一个数组，第一个元素是node.exe的路径，第二个元素将是Js文件的名称 第三个及之后的参数是在命令行里面运行该文件时node 文件名 参数列表 里面的参数

process.env 返回当前环境信息

process.pid 返回当前运行程序的pid 端口号

process.title 返回当前运行进程的显示名称

process.arch 返回当前CPU处理器架构 arm/ia32/x64

process.stdin process.stdout标准输入输出流

process.stdout.write("hello");

//默认情况下，输入流是关闭的，要监听处理输入流数据，首先要开启输入流
process.stdin.resume();
//用户输入数据时触发
process.stdin.on("data",function(chunk){
	//用户输入的数据将会通过chunk传进来
});

Buffer类，用于更好的操作二进制数据的类，是一个全局类

//构造函数
new Buffer(20); //分配一个长度为20的缓冲区 当我们为一个Buffer对象分配空间大小以后，其长度固定，不能改变

new Buffer([1,2,3]); //字节数组

new Buffer("miaov", "utf-8"); //以utf-8编码方式打印 "miaov"这个字符串 默认是utf-8
for(var i=0;i<bf.length;i++){
	console.log(bf[i]); //以十进制方式打印
	console.log(bf[i].toString(8)); //以八进制方式打印
	console.log(String.fromCharCode(bf[i]));
}

bf.length是字节数组的长度 不是字符串的长度

var str1="妙味";
var bf1=new Buffer(str1);
console.log(bf1.length);//6

var str="miaov";
var bf=new Buffer(5);
bf.write(str);//把字符串写入bf缓冲区中

bf.write(str,1);//将str写入bf缓冲区的时候是从缓冲区的第1位开始写起，而不是从第0位开始写起

bf.write(str,1,3);//将str写入bf缓冲区的时候从第1位开始写，写3位

bf.write(str,1,3,"utf-8");

bf.toString();//将bf对象变成字符串

bf.toString("utf-8",1,3); //将bf的1-3位取出生成一个子串返回回去，不包含第3位

var bf=new Buffer("妙味");
console.log(bf.toString("utf-8",1)); //utf-8一个汉字占3个字节，从第一个字节开始截取那么第一个汉字的第一个字节就丢失了，从而产生了乱码

var bf=new Buffer("miaov");
console.log(bf.toJSON()); {type:"Buffer",data:[109,105,97,111,118]}

var bf=new Buffer("miaov");
bf.slice(2,4); //截取bf的2-4位，不包括第4位

//copy方法，copy出来的和原来的Buffer对象之间没有引用关系
var bf=new Buffer("miaov");
var bf2=bf.copy(); //拷贝 这样会报错

//正确做法是：
var bf=new Buffer(10);
var bf2=new Buffer("miaov");
bf2.copy(bf); //将bf2里面的内容拷贝到bf中

bf2.copy(bf,1,3); //将bf2的第1位到第3位拷贝到bf中

静态方法
Buffer.isEncoding("utf-8") //true 返回的布尔值代表Buffer是否支持该编码
Buffer.isBuffer(new Buffer("miapv"))
Buffer.byteLength("妙味"); //6 返回字节长度

Buffer.byteLength("妙味","ascii"); //2

var list=[new Buffer(str1),new Buffer(str2)];
var bf=Buffer.concat(list);
console.log(bf);//将两个字节数组拼接成一个字节数组

字符串可以直接和Buffer对象通过加号拼接，拼接时会调用Buffer对象的toString方法

====================================fs
var fs=require("fs");
//参数2：打开文件的方式 读/写
//参数3：设置文件的方式 读/写/执行 4/2/1 windows下没什么用
//参数4：回调
		err 打开失败时错误保存在err里，如果打开成功err为null
		fd 被打开文件的标识 类似id唯一标识 在此处是唯一标识打开的文件
fs.open("a.txt","r",function(err,fd){
	//console.log(err);
	//console.log(fd); //3
	
	if(err){
		console.log("文件打开失败");
	}else{
		console.log("文件打开成功");
	}
});

fs.openSync(path,flags,[mode]); //fs.open的同步版本 参数只有3个，通过返回值去处理打开之后的操作

fs.open("a.txt","r",function(err,fd){
	if(err){
		console.log("文件打开失败");
	}else{
		//fs.read(fd,buffer,offset,length,position,callback);
		//从文件中的第position位开始读取，将读取到的内容填充到buffer对象中，从buffer对象的第offset位开始填充，填充length位
		//position可以为null
		var bf1=new Buffer(10);
		fs.read(fd,bf1,0,4,null,function(err,length,newBf){
			
		});
	}
});

fs.readSnyc(...)://同步方法

//文件写入 open里面的方式r+ 读写方式
fs.open("1.txt","r+",function(err,fd){
	//fs.write(fd,buffer,offset,length[,position],callback);
	//offset：buffer对象要写入的数据的偏移
	//position：fd的起始位置
	if(err){
		console.log("打开文件失败");
	}else{
		var bf=new Buffer("123");
		fs.write(fd,bf,0,3,0,function(){
			console.log(arguments);
		});
	}
	
	//write的重载 将字符串"1234"写入到文件fd中，在fd文件中从第5位开始写，按照utf-8编码方式写入 写入文件位置和编码这两个参数可以省略
	fs.write(fd,"1234",5,"utf-8",function(){
		console.log(arguments);
	});
	fs.close(fd,function(){
		console.log("操作完成之后关闭文件");
	});
});

//////////////////////////////////顶层方法
//向2.txt中写入hello，如果文件不存在则新建，如果存在则覆盖原有内容
//fs.writeFile("2.txt","hello"[,options],cb); 第三个参数可以设置一些参数，例如编码
fs.writeFile("2.txt","hello",function(){
	console.log(arguments);
});

//向文件末尾添加内容
fs.appendFile("2.txt","-leo",function(){
	console.log(arguments);
});

fs.exists("2.txt",function(isExists){
	if(isExists){
		fs.appendFile("2.txt","-leo",function(err){
			if(err){
				console.log("追加失败");
			}else{
				console.log("追加成功");
			}
		});
	}else{
		fs.writeFile("2.txt","miaov",function(err){
			if(err){
				console.log(err);
			}else{
				console.log("成功");
			}
		});
	}
});


fs.readFile("2.txt",function(err,data){
	if(err){
		console.log("文件读取失败");
	}else{
	
	}
});

fs.unlink("2.txt",function(err){
	if(err){
		console.log("删除失败");
	}
});

fs.rename("2.txt","3.txt",function(err){}); //将2.txt重命名为3.txt

fs.stat("2.txt",function(o){
	console.log(o);//和2.txt这个文件相关的一些信息
});

//不稳定的方法，在后期版本中可能会改变，在不同操作系统下支持度不同，该方法是调用操作系统底层监听文件是否变化的方法实现的
//当2.txt被重命名或者修改时触发
fs.watch("2.txt",function(ev,fn){
	if(fn){
		console.log(fn+"发生了改变");
	}
}); 

//创建文件夹
fs.mkdir("./newDir",function(){
	console.log(arguments);
});

//删除文件夹
fs.rmdir("./newDir",function(){});

//读取文件夹
fs.readdir("./",function(err,fileList){
	//console.log(fileList);
	fileList.forEach(function(f){
		fs.stat(f,function(err,info){
			//console.log(arguments);
			switch(info.mode){
				case 16822:
					console.log("[文件夹]"+f);
					break;
				case 33206:
					console.log("[文件]"+f);
					break;
				default:
					console.log("[其他类型]"+f);
					break;
			}
		});
	});
});

//项目自动化构建
var projectData={
	"name":"miaov",
	"fileData":[
		{
			"name":"css",
			"type":"dir"
		},
		{
			"name":"js",
			"type":"dir"
		},
		{
			"name":"images",
			"type":"dir"
		},
		{
			"name":"index.html",
			"type":"file",
			"content":"<html>\n\t</html>"
		}
	]
};

var fs=require("fs");
if(projectData.name){
	fs.mkdirSync(projectData.name);
	var fileData=projectData.fileData;
	if(fileData&&fileData.forEach){
		fileData.forEach(function(f){
			f.path=projectData.name+"/"+f.name;
			f.content=f.content||"";
			switch(f.type){
				case "dir":
					fs.mkdirSync(f.path);
					break;
				case "file":
					fs.writeFileSync(f.path,f.content);
					break;
				default:
					break;
			}
		});
	}
}





















